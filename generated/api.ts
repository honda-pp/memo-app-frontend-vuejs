/* tslint:disable */
/* eslint-disable */
/**
 * Memo App API
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Memo
 */
export interface Memo {
    /**
     * 
     * @type {number}
     * @memberof Memo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    'content': string;
    /**
     * 
     * @type {number}
     * @memberof Memo
     */
    'user_id': number;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * 
     * @type {object}
     * @memberof ModelError
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
}

/**
 * MemoHandler - axios parameter creator
 * @export
 */
export const MemoHandlerAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new memo.
         * @summary Create a new memo
         * @param {Memo} memo Memo object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo: async (memo: Memo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'memo' is not null or undefined
            assertParamExists('createMemo', 'memo', memo)
            const localVarPath = `/memo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a single memo.
         * @summary Delete memo by ID
         * @param {number} id ID of memo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemoById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMemoById', 'id', id)
            const localVarPath = `/memo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single memo.
         * @summary Find memo by ID
         * @param {number} id ID of memo to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemoById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getMemoById', 'id', id)
            const localVarPath = `/memo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of memos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemoList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/memo-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing memo.
         * @summary Update an existing memo
         * @param {number} id ID of memo to update
         * @param {Memo} memo Memo object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemo: async (id: number, memo: Memo, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateMemo', 'id', id)
            // verify required parameter 'memo' is not null or undefined
            assertParamExists('updateMemo', 'memo', memo)
            const localVarPath = `/memo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MemoHandler - functional programming interface
 * @export
 */
export const MemoHandlerFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MemoHandlerAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new memo.
         * @summary Create a new memo
         * @param {Memo} memo Memo object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMemo(memo: Memo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMemo(memo, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MemoHandler.createMemo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Delete a single memo.
         * @summary Delete memo by ID
         * @param {number} id ID of memo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMemoById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMemoById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MemoHandler.deleteMemoById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a single memo.
         * @summary Find memo by ID
         * @param {number} id ID of memo to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemoById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemoById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MemoHandler.getMemoById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of memos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMemoList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Memo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMemoList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MemoHandler.getMemoList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update an existing memo.
         * @summary Update an existing memo
         * @param {number} id ID of memo to update
         * @param {Memo} memo Memo object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMemo(id: number, memo: Memo, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMemo(id, memo, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['MemoHandler.updateMemo']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * MemoHandler - factory interface
 * @export
 */
export const MemoHandlerFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MemoHandlerFp(configuration)
    return {
        /**
         * Creates a new memo.
         * @summary Create a new memo
         * @param {Memo} memo Memo object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMemo(memo: Memo, options?: any): AxiosPromise<Memo> {
            return localVarFp.createMemo(memo, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a single memo.
         * @summary Delete memo by ID
         * @param {number} id ID of memo to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMemoById(id: number, options?: any): AxiosPromise<Memo> {
            return localVarFp.deleteMemoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single memo.
         * @summary Find memo by ID
         * @param {number} id ID of memo to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemoById(id: number, options?: any): AxiosPromise<Memo> {
            return localVarFp.getMemoById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of memos.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMemoList(options?: any): AxiosPromise<Array<Memo>> {
            return localVarFp.getMemoList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing memo.
         * @summary Update an existing memo
         * @param {number} id ID of memo to update
         * @param {Memo} memo Memo object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMemo(id: number, memo: Memo, options?: any): AxiosPromise<Memo> {
            return localVarFp.updateMemo(id, memo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MemoHandler - object-oriented interface
 * @export
 * @class MemoHandler
 * @extends {BaseAPI}
 */
export class MemoHandler extends BaseAPI {
    /**
     * Creates a new memo.
     * @summary Create a new memo
     * @param {Memo} memo Memo object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoHandler
     */
    public createMemo(memo: Memo, options?: RawAxiosRequestConfig) {
        return MemoHandlerFp(this.configuration).createMemo(memo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a single memo.
     * @summary Delete memo by ID
     * @param {number} id ID of memo to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoHandler
     */
    public deleteMemoById(id: number, options?: RawAxiosRequestConfig) {
        return MemoHandlerFp(this.configuration).deleteMemoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single memo.
     * @summary Find memo by ID
     * @param {number} id ID of memo to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoHandler
     */
    public getMemoById(id: number, options?: RawAxiosRequestConfig) {
        return MemoHandlerFp(this.configuration).getMemoById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Optional extended description in Markdown.
     * @summary Returns a list of memos.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoHandler
     */
    public getMemoList(options?: RawAxiosRequestConfig) {
        return MemoHandlerFp(this.configuration).getMemoList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing memo.
     * @summary Update an existing memo
     * @param {number} id ID of memo to update
     * @param {Memo} memo Memo object that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MemoHandler
     */
    public updateMemo(id: number, memo: Memo, options?: RawAxiosRequestConfig) {
        return MemoHandlerFp(this.configuration).updateMemo(id, memo, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersHandler - axios parameter creator
 * @export
 */
export const UsersHandlerAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a single user.
         * @summary Delete user by ID
         * @param {number} id ID of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single user.
         * @summary Find user by ID
         * @param {number} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersHandler - functional programming interface
 * @export
 */
export const UsersHandlerFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersHandlerAxiosParamCreator(configuration)
    return {
        /**
         * Delete a single user.
         * @summary Delete user by ID
         * @param {number} id ID of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersHandler.deleteUserById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a single user.
         * @summary Find user by ID
         * @param {number} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersHandler.getUserById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersHandler.getUserList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersHandler - factory interface
 * @export
 */
export const UsersHandlerFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersHandlerFp(configuration)
    return {
        /**
         * Delete a single user.
         * @summary Delete user by ID
         * @param {number} id ID of user to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.deleteUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single user.
         * @summary Find user by ID
         * @param {number} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserList(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUserList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersHandler - object-oriented interface
 * @export
 * @class UsersHandler
 * @extends {BaseAPI}
 */
export class UsersHandler extends BaseAPI {
    /**
     * Delete a single user.
     * @summary Delete user by ID
     * @param {number} id ID of user to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersHandler
     */
    public deleteUserById(id: number, options?: RawAxiosRequestConfig) {
        return UsersHandlerFp(this.configuration).deleteUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single user.
     * @summary Find user by ID
     * @param {number} id ID of user to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersHandler
     */
    public getUserById(id: number, options?: RawAxiosRequestConfig) {
        return UsersHandlerFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Optional extended description in Markdown.
     * @summary Returns a list of users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersHandler
     */
    public getUserList(options?: RawAxiosRequestConfig) {
        return UsersHandlerFp(this.configuration).getUserList(options).then((request) => request(this.axios, this.basePath));
    }
}



