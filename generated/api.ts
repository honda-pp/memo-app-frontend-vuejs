/* tslint:disable */
/* eslint-disable */
/**
 * Memo App API
 * API description in Markdown.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface MemoAppError
 */
export interface MemoAppError {
    /**
     * 
     * @type {string}
     * @memberof MemoAppError
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof MemoAppError
     */
    'code': number;
    /**
     * 
     * @type {object}
     * @memberof MemoAppError
     */
    'data'?: object;
}
/**
 * 
 * @export
 * @interface MemoAppUser
 */
export interface MemoAppUser {
    /**
     * 
     * @type {number}
     * @memberof MemoAppUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof MemoAppUser
     */
    'name': string;
}

/**
 * UsersMemoAppApi - axios parameter creator
 * @export
 */
export const UsersMemoAppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single user.
         * @summary Find user by ID
         * @param {number} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersMemoAppApi - functional programming interface
 * @export
 */
export const UsersMemoAppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersMemoAppApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single user.
         * @summary Find user by ID
         * @param {number} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MemoAppUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersMemoAppApi.getUserById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MemoAppUser>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersMemoAppApi.getUsers']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersMemoAppApi - factory interface
 * @export
 */
export const UsersMemoAppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersMemoAppApiFp(configuration)
    return {
        /**
         * Returns a single user.
         * @summary Find user by ID
         * @param {number} id ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: number, options?: any): AxiosPromise<MemoAppUser> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Optional extended description in Markdown.
         * @summary Returns a list of users.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<MemoAppUser>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersMemoAppApi - object-oriented interface
 * @export
 * @class UsersMemoAppApi
 * @extends {BaseAPI}
 */
export class UsersMemoAppApi extends BaseAPI {
    /**
     * Returns a single user.
     * @summary Find user by ID
     * @param {number} id ID of user to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersMemoAppApi
     */
    public getUserById(id: number, options?: RawAxiosRequestConfig) {
        return UsersMemoAppApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Optional extended description in Markdown.
     * @summary Returns a list of users.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersMemoAppApi
     */
    public getUsers(options?: RawAxiosRequestConfig) {
        return UsersMemoAppApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }
}



